<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>myjfxprojects</groupId>
	<artifactId>SciFiDigitalClock</artifactId>
	<version>1.0.1</version>
	<packaging>jar</packaging>
	<name>ClockQue</name>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<project.java.version>18</project.java.version>
		<maven.compiler.release>${project.java.version}</maven.compiler.release>
		<maven.compiler.source>${project.java.version}</maven.compiler.source>
		<maven.compiler.target>${project.java.version}</maven.compiler.target>
		<maven.compiler.encoding>${project.build.sourceEncoding}</maven.compiler.encoding>
		<maven.resources.encoding>${project.build.sourceEncoding}</maven.resources.encoding>
		<openJfxVersion>19</openJfxVersion>
		<fileVersionForExe>1.0.0.1</fileVersionForExe>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
			<version>${openJfxVersion}</version>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-fxml</artifactId>
			<version>${openJfxVersion}</version>
		</dependency>
		<!-- Cross-platform dependencies for the windows platform
		(apply 'mac' for MacOsX or 'linux' for Unix platforms-->
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-graphics</artifactId>
			<version>${openJfxVersion}</version>
			<classifier>win</classifier>
		</dependency>
		
		<!--This is a IMPORTANT dependencies, because the JOOQ Frame work, supports this SLF4J implementation of Log4j
			as the default LOGGER. So we must not implement a separate LOGGER for JOOQ
		-->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>2.20.0</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.10.1</version>
		</dependency>

		<!-- Jackson framework to convert and handle JSON-->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.14.2</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml -->
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-yaml</artifactId>
			<version>2.14.2</version>
		</dependency>

		<!-- Java Database Connectivity for SQLite-->
		<dependency>
			<groupId>org.xerial</groupId>
			<artifactId>sqlite-jdbc</artifactId>
			<version>3.39.4.0</version>
		</dependency>
		<!-- JOOQ framework to talk with the database -->
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq</artifactId>
			<version>3.17.8</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.11.0</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.3.0</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<!-- define the final directory for the required application resources -->
							<outputDirectory>${project.build.directory}/resources</outputDirectory>
							<resources>
								<resource>
									<directory>${project.basedir}/src/main/resources</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.5.0</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<!-- define the final directory for the required application dependencies -->
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.3.0</version>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<!-- Set class path for the JAR, to find classes for executing this application -->
							<classpathPrefix>lib/</classpathPrefix>
							<mainClass>myjfxprojects.sciFiDigitalClock.main.SuperMain</mainClass>
						</manifest>
						<manifestEntries>
							<!-- Set entry point of the class path, this is root directory -->
							<Class-Path>.</Class-Path>
						</manifestEntries>
					</archive>
					<finalName>${project.artifactId}-${project.version}</finalName>
					<!-- <outputDirectory>${project.build.directory}/${project.artifactId}</outputDirectory> -->
				</configuration>
			</plugin>

			<!-- Plugin to wrap the JAR file in an executable File -->
			<plugin>
				<groupId>com.akathist.maven.plugins.launch4j</groupId>
				<artifactId>launch4j-maven-plugin</artifactId>
				<version>2.3.2</version>
				<executions>
					<execution>
						<id>l4j-clui</id>
						<phase>package</phase>
						<goals>
							<goal>launch4j</goal>
						</goals>
						<configuration>
							<headerType>gui</headerType>
							<jar>${project.build.directory}/${project.artifactId}-${project.version}.jar</jar>
							<outfile>${project.build.directory}/${project.name}.exe</outfile>
							<downloadUrl>https://jdk.java.net/archive/</downloadUrl>
							<classPath>
								<mainClass>myjfxprojects.sciFiDigitalClock.main.SuperMain</mainClass>
								<preCp>anything</preCp>
							</classPath>
							<icon>${project.basedir}/conf/application.ico</icon>
							<errTitle>${project.name} Failed to execute</errTitle>

							<jre>
								<!-- Relative path to the custom JDK for launching the exe -->
								<path>./lib/customJDK-18.0.1.1</path>
								<opts>
									<!-- This is an IMPORTANT JVM option, to use always UTF-8 encoding at runtime -->
									<opt>-Dfile.encoding=UTF-8</opt>
									<!-- Set module path and the required JavaFX modules for this application to the JVM -->
									<opt>--module-path .\lib --add-modules javafx.controls,javafx.fxml</opt>
								</opts>
							</jre>

							<splash>
								<!-- Set the splash screen image, only BMP files with 24 bit color depth are allowed -->
								<file>${project.basedir}/conf/javafxSplash.bmp</file>
								<!-- set show duration time out in seconds -->
								<timeout>20</timeout>
								<!-- splash screen waits until application is running -->
								<waitForWindow>true</waitForWindow>
							</splash>

							<versionInfo>
								<fileVersion>${fileVersionForExe}</fileVersion>
								<txtFileVersion>${fileVersionForExe}</txtFileVersion>
								<fileDescription>${project.name}</fileDescription>
								<copyright>2022 openjfx.io</copyright>
								<productVersion>${fileVersionForExe}</productVersion>
								<txtProductVersion>${fileVersionForExe}</txtProductVersion>
								<productName>${project.name}</productName>
								<companyName>FunWithJavaFX</companyName>
								<internalName>${project.artifactId}</internalName>
								<originalFilename>${project.name}.exe</originalFilename>
								<language>GERMAN</language>
							</versionInfo>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Plugin to handle the final deployment of this application -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>3.5.0</version>
				<executions>
					<execution>
						<!-- Bundle the .exe and the custom JDK into a final ZIP archive -->
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<finalName>${project.name}</finalName>
							<appendAssemblyId>false</appendAssemblyId>
							<descriptors>
								<!-- Handle the plugin with the assembly file -->
								<descriptor>${project.basedir}/conf/assembly.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>